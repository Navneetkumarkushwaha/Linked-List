# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        slow=fast=head
        for i in range(n):         # reaching at previous of node that to be deleted
            fast=fast.next
            
        if fast is None:           # if we have reached end of linked list then we will delete  
            return head.next       # start node
        
        while fast.next:           #reaching at last of linked list as fast 
                                   # slow will denote previous of removable node. 
            slow=slow.next
            fast=fast.next
            
        slow.next=slow.next.next
        
        return  head
        
