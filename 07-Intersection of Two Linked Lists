# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def solution1(self,head1,head2):
        while head2:
            temp = head1
            while temp:
                if temp == head2:
                    return head2
                temp = temp.next
            head2 = head2.next
        return None
    
    def solution2(self,headA,headB):
        temp = headA
        s = set()
        
        while temp:
            s.add(temp)
            temp = temp.next
            
        t = headB
        
        while t:
            if t in s:
                return t
            t = t.next
        return None

    def solution3(self,head1,head2):
        n1 = 0
        n2 = 0
        temp1 = head1
        while temp1:
            n1 += 1
            temp1 = temp1.next
        temp2 = head2
        while temp2:
            n2 += 1
            temp2 = temp2.next
        diff = abs(n1-n2)
        if n1>n2:
            for i in range(diff):
                head1 = head1.next
        elif n1<n2:
            for j in range(diff):
                head2 = head2.next
        while head1 and head2:
            if head1 == head2:
                return head1
            head1 = head1.next
            head2 = head2.next
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        
        #return self.solution1(headA,headB)
        #return self.solution2(headA,headB)
        return self.solution3(headA,headB)           
